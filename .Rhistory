install.packages("Matrix")
library(markovchain)
library(Matrix)
install.packages("devtools")
library("devtools")
install_github("cothurn/MAXIM-R")
install_github("cothurn/MAXIM-R")
checkaP <- function(a,P){
sA = length(a)
sP = dim(P)
if(sum(a>0)!=sA)
print("initial probabilities must be non-negative")
if(abs(sum(a))-1 > 10^-12)
print("initial probabiliies must sum to 1")
if(sum(rowSums(P)!=1)!=0)
print("row sums of the transition matrix must be 1")
if(sP[1]!=sP[2])
print("transition matrix must be square")
if(sum(P>0)!=sP[1]*sP[2])
print("transition probabilities must be non-negative")
if(sA != sP[1])
print("the initial distribution is not compatible with the transition matrix")
}
checkP <- function(P){
sP = dim(P)
if(sP[1]!=sP[2])
print("transition matrix must be square")
if(sum(P>0)!=sP[1]*sP[2])
print("transition probabilities must be non-negative")
if(sum(rowSums(P)!=1)!=0)
print("row sums of the transition matrix must be 1")
}
checkcP <- function(c,P){
sC = length(c)
sP = dim(P)
if(sC!=sP[2])
print("cost vector not compatible witht he transition matrix")
}
# Transient Distribution
dtmctd <- function(a,P,n){
if(n<0 || n%%1!=0)
print("Invalid entry of n")
checkaP(a,P)
return(a%*%(P%^%n))
}
# Limiting Distribution and Occupancy Distribution.
dtmcod <- function(P){
checkP(P)
temp = diag(dim(P)[1]) - P
temp[,1] = c(rep(1,dim(P)[1]))
A = c(1,rep(0,dim(P)[1]-1))
B = temp
return(solve(t(B),A))
}
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- c(37.31, 43.90, 96.76, 159.80, 262.72, 527.28, 2187.21286)
l2 <- c(37.31, 43.90, 96.76, 159.80, 262.72, 527.28, 1849.40132)
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
print(s)
la = s * 12
print(la)
# 定义表中的 q_k, p_k 和 b_k
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
# 初始化 r 向量
r <- numeric(length(b))
# 计算 r_k 的值
for (k in 0:5) {
r[k + 1] <- q[k + 1] * b[k + 1]
}
# 处理 k = 6 的情况
r[7] <- (p[7] + q[7]) * b[7]
# 输出结果
print(r)
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
l1 <- numeric(length(b))
for (k in 0:5) {
r[k + 1] <- q[k + 1] * b[k + 1]
}
r[7] <- (p[7] + q[7]) * b[7]
print(r)
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
r[k + 1] <- q[k + 1] * b[k + 1]
}
r[7] <- (p[7] + q[7]) * b[7]
cat("r =", r, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
r[k + 1] <- q[k + 1] * b[k + 1]
}
r[7] <- (p[7] + q[7]) * b[7]
print(l1)
l2 <- c(37.31, 43.90, 96.76, 159.80, 262.72, 527.28, 1849.40132)
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
print(s)
la = s * 12
print(la)
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
r[k + 1] <- q[k + 1] * b[k + 1]
}
r[7] <- (p[7] + q[7]) * b[7]
print(l1)
l2 <- c(37.31, 43.90, 96.76, 159.80, 262.72, 527.28, 1849.40132)
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
print(s)
la = s * 12
print(la)
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
l2[k + 1] <- q[k + 1] * b[k + 1]
}
l2[7] <- (p[7] + q[7]) * b[7] + p[7]
cat("l2 =", l2, "\n")
l2 <- c(37.31, 43.90, 96.76, 159.80, 262.72, 527.28, 1849.40132)
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
print(s)
la = s * 12
print(la)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
l2[k + 1] <- q[k + 1] * b[k + 1]
}
l2[7] <- (p[7] + q[7]) * b[7] + p[7] * 1
cat("l2 =", l2, "\n")
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
l2[k + 1] <- q[k + 1] * b[k + 1]
}
l2[7] <- (p[7] + q[7]) * b[7] + p[7] * 1
cat("l2 =", l2, "\n")
l2 <- c(37.31, 43.90, 96.76, 159.80, 262.72, 527.28, 1849.40132)
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
print(s)
la = s * 12
print(la)
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329, 0.250)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
l2[k + 1] <- q[k + 1] * b[k + 1]
}
l2[7] <- (p[8] + q[7]) * b[7] + p[7] * 1
cat("l2 =", l2, "\n")
l2 <- c(37.31, 43.90, 96.76, 159.80, 262.72, 527.28, 1849.40132)
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
print(s)
la = s * 12
print(la)
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329, 0.250)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
l2[k + 1] <- q[k + 1] * b[k + 1]
}
l2[7] <- (p[8] + q[7]) * b[7] + p[7] * 1
cat("l2 =", l2, "\n")
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
print(s)
la = s * 12
print(la)
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329, 0.250)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
l2[k + 1] <- q[k + 1] * b[k + 1]
}
l2[7] <- (p[8] + q[7]) * b[7] + p[7] * 1
cat("l2 =", l2, "\n")
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
la = s * 12
print(la)
checkaP <- function(a,P){
sA = length(a)
sP = dim(P)
if(sum(a>0)!=sA)
print("initial probabilities must be non-negative")
if(abs(sum(a))-1 > 10^-12)
print("initial probabiliies must sum to 1")
if(sum(rowSums(P)!=1)!=0)
print("row sums of the transition matrix must be 1")
if(sP[1]!=sP[2])
print("transition matrix must be square")
if(sum(P>0)!=sP[1]*sP[2])
print("transition probabilities must be non-negative")
if(sA != sP[1])
print("the initial distribution is not compatible with the transition matrix")
}
checkP <- function(P){
sP = dim(P)
if(sP[1]!=sP[2])
print("transition matrix must be square")
if(sum(P>0)!=sP[1]*sP[2])
print("transition probabilities must be non-negative")
if(sum(rowSums(P)!=1)!=0)
print("row sums of the transition matrix must be 1")
}
checkcP <- function(c,P){
sC = length(c)
sP = dim(P)
if(sC!=sP[2])
print("cost vector not compatible witht he transition matrix")
}
# Transient Distribution
dtmctd <- function(a,P,n){
if(n<0 || n%%1!=0)
print("Invalid entry of n")
checkaP(a,P)
return(a%*%(P%^%n))
}
# Limiting Distribution and Occupancy Distribution.
dtmcod <- function(P){
checkP(P)
temp = diag(dim(P)[1]) - P
temp[,1] = c(rep(1,dim(P)[1]))
A = c(1,rep(0,dim(P)[1]-1))
B = temp
return(solve(t(B),A))
}
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329, 0.250)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
l2[k + 1] <- q[k + 1] * b[k + 1]
}
l2[7] <- (p[8] + q[7]) * b[7] + p[7] * 1
cat("l2 =", l2, "\n")
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
la = s * 12
print(la)
checkaP <- function(a,P){
sA = length(a)
sP = dim(P)
if(sum(a>0)!=sA)
print("initial probabilities must be non-negative")
if(abs(sum(a))-1 > 10^-12)
print("initial probabiliies must sum to 1")
if(sum(rowSums(P)!=1)!=0)
print("row sums of the transition matrix must be 1")
if(sP[1]!=sP[2])
print("transition matrix must be square")
if(sum(P>0)!=sP[1]*sP[2])
print("transition probabilities must be non-negative")
if(sA != sP[1])
print("the initial distribution is not compatible with the transition matrix")
}
checkP <- function(P){
sP = dim(P)
if(sP[1]!=sP[2])
print("transition matrix must be square")
if(sum(P>0)!=sP[1]*sP[2])
print("transition probabilities must be non-negative")
if(sum(rowSums(P)!=1)!=0)
print("row sums of the transition matrix must be 1")
}
checkcP <- function(c,P){
sC = length(c)
sP = dim(P)
if(sC!=sP[2])
print("cost vector not compatible witht he transition matrix")
}
# Transient Distribution
dtmctd <- function(a,P,n){
if(n<0 || n%%1!=0)
print("Invalid entry of n")
checkaP(a,P)
return(a%*%(P%^%n))
}
# Limiting Distribution and Occupancy Distribution.
dtmcod <- function(P){
checkP(P)
temp = diag(dim(P)[1]) - P
temp[,1] = c(rep(1,dim(P)[1]))
A = c(1,rep(0,dim(P)[1]-1))
B = temp
return(solve(t(B),A))
}
q <- c(0.030, 0.021, 0.037, 0.052, 0.075, 0.135, 0.182)
p <- c(0.033, 0.048, 0.090, 0.165, 0.212, 0.287, 0.329, 0.250)
b <- c(1243.78, 2090.33, 2615.16, 3073.13, 3502.99, 3905.77, 4280.26)
states <- c("0", "1", "2", "3", "4", "5", "6")
P <- matrix(c(0.967, 0.033, 0, 0, 0, 0, 0,
0.952, 0, 0.048, 0, 0, 0, 0,
0.910, 0, 0, 0.090, 0, 0, 0,
0.835, 0, 0, 0, 0.165, 0, 0,
0.788, 0, 0, 0, 0, 0.212, 0,
0.713, 0, 0, 0, 0, 0, 0.287,
1, 0, 0, 0, 0, 0, 0),
byrow = TRUE, nrow = 7)
l1 <- numeric(length(b))
for (k in 0:5) {
l1[k + 1] <- q[k + 1] * b[k + 1]
}
l1[7] <- (p[7] + q[7]) * b[7]
cat("l1 =", l1, "\n")
l2 <- numeric(length(b))
for (k in 0:5) {
l2[k + 1] <- q[k + 1] * b[k + 1]
}
l2[7] <- (p[8] + q[7]) * b[7] + p[7] * 1
cat("l2 =", l2, "\n")
pi <- dtmcod(P)
Lm1 <- sum(pi * l1)
Lm2 <- sum(pi * l2)
print(pi)
print(Lm1)
print(Lm2)
s = 14000000*(Lm1 - Lm2)
la = s * 12
print(la)
